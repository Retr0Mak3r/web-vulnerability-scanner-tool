import requests
from bs4 import BeautifulSoup as bs
from urllib.parse import urljoin
from pprint import pprint

s = requests.Session()
s.headers["User-Agent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Safari/537.36"




def get_all_forms(url):
    # bs retourne les élèments HTML de l'url donné en argument
    soup = bs(s.get(url).content, "html.parser")
    return soup.find_all("form")


def get_form_details(form):
    #Extrait toute les informations utiles d'un formulaire HTML
    details = {}
    # obtient les formulaires
    try:
        action = form.attrs.get("action").lower()
    except:
        action = None
    # retourne la méthode du formulaire
    method = form.attrs.get("method", "get").lower()
    # retourne les élèments input ainsi que leurs types et leurs noms
    inputs = []
    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        input_value = input_tag.attrs.get("value", "")
        inputs.append({"type": input_type, "name": input_name, "value": input_value})
    # créer un dictionnaire
    details["action"] = action
    details["method"] = method
    details["inputs"] = inputs
    return details


def is_vulnerable(response):
   # détermine si la page à est susceptible d'avoir une injection SQLi
    errors = {
        # MySQL
        "Erreur de syntaxe MySQL",
        "warning: mysql",
        # SQL Server
        "Erreur SQL Server",
        # Oracle
        "Erreur SQL Oracle",
    }
    for error in errors:
        # si une erreur à été trouvée retourn la valeur True
        if error in response.content.decode().lower():
            return True
    # Aucune erreur detectée
    return False


def scan_sql_injection(url):
    # test de l'url
    for c in "\"'":
        # rajoute des doubles quote à l'url
        new_url = f"{url}{c}"
        print("[!] Trying", new_url)
        # créer une requête HTTP
        res = s.get(new_url)
        if is_vulnerable(res):
            # Injection SQL détecté sur l'URL,
            print("[+] SQL Injection vulnerability detected, link:", new_url)
            return
    # test sur le formulaire HTML
    forms = get_all_forms(url)
    print(f"[+] Detected {len(forms)} forms on {url}.")
    for form in forms:
        form_details = get_form_details(form)
        for c in "\"'":
            # données à valider sur le formulaire
            data = {}
            for input_tag in form_details["inputs"]:
                if input_tag["value"] or input_tag["type"] == "hidden":
                    # Si un des input à un attribut Hidden
                    #  a utiliser dans le formulaire
                    try:
                        data[input_tag["name"]] = input_tag["value"] + c
                    except:
                        pass
                elif input_tag["type"] != "submit":
                    # utilise des caractère spéciaux dans le formulaire
                    data[input_tag["name"]] = f"test{c}"
            # join l'url avec l'action recupérer dans le formulaire
            url = urljoin(url, form_details["action"])
            if form_details["method"] == "post":
                res = s.post(url, data=data)
            elif form_details["method"] == "get":
                res = s.get(url, params=data)
            # test dans le cas ou la page est vulnérable
            if is_vulnerable(res):
                print("[+] SQL Injection vulnerability detected, link:", url)
                print("[+] Form:")
                pprint(form_details)
                break

if __name__ == "__main__":
    import sys
    url = sys.argv[1]
    scan_sql_injection(url)